#include<iostream>
#include<algorithm>
using namespace std;

struct Node
{
	int data;
	Node* left;
	Node* right;

	Node(int val)
	{
		data = val;
		left = NULL;
		right = NULL;
	}
};



int height(Node* root)
{
	if (root == NULL)
	{
		return 0;
	}

	int lh = height(root->left);
	int rh = height(root->right);

	return max(lh, rh) + 1;
}
bool checkBalancedTree(Node* root)
{
	if (root == NULL)
	{
		return true;
	}
	if (checkBalancedTree(root->left) == false)
	{
		return false;
	}
	if (checkBalancedTree(root->right) == false)
	{
		return false;
	}

	int lh = height(root->left);
	int rh = height(root->right);

	return (abs(lh - rh) <= 1);

}


int main()
{
	
	Node* root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->left = new Node(4);
	root->left->right = new Node(5);
	root->right->left = new Node(6);
	root->right->right = new Node(7);

	bool ans = checkBalancedTree(root);
	
	if (ans)
	{
		cout << "balanced tree" << endl;
	}
	else
	{
		cout << "unbalanced tree";
	}

	return 0;
}
